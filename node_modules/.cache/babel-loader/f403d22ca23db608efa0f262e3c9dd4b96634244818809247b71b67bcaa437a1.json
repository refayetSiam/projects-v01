{"ast":null,"code":"import Papa from'papaparse';export const loadCSV=async filePath=>{try{const response=await fetch(filePath);const csvText=await response.text();return new Promise((resolve,reject)=>{Papa.parse(csvText,{header:true,complete:results=>{resolve(results.data);},error:error=>{reject(error);}});});}catch(error){console.error(`Error loading CSV file ${filePath}:`,error);throw error;}};export const loadAllData=async()=>{try{const[assetTypesData,costDatabaseData,assetsData,projectsData,actionsData,auditTrailData,teamsData,regionsData]=await Promise.all([loadCSV('/data/asset-types.csv'),loadCSV('/data/cost-database.csv'),loadCSV('/data/assets.csv'),loadCSV('/data/projects.csv'),loadCSV('/data/actions.csv'),loadCSV('/data/audit-trail.csv'),loadCSV('/data/teams.csv'),loadCSV('/data/regions.csv')]);// Transform asset types data\nconst assetTypes={};assetTypesData.forEach(row=>{assetTypes[row.code]={name:row.name,unit:row.unit,prefix:row.prefix,assetClass:row.assetClass};});// Transform cost database data\nconst costDatabase={};costDatabaseData.forEach(row=>{if(!costDatabase[row.assetClass]){costDatabase[row.assetClass]={};}if(!costDatabase[row.assetClass][row.assetType]){costDatabase[row.assetClass][row.assetType]={};}costDatabase[row.assetClass][row.assetType][row.actionName]={cost:parseFloat(row.cost),unit:row.unit,description:row.description};});// Transform assets data\nconst assets=assetsData.map(row=>({...row,size:parseFloat(row.size),expectedLifespan:parseInt(row.expectedLifespan),conditionScore:parseInt(row.conditionScore)}));// Transform projects data\nconst projects=projectsData.map(row=>({...row,id:parseInt(row.id),completion:parseInt(row.completion),actions:[]}));// Transform actions data and attach to projects\nconst actions=actionsData.map(row=>({...row,id:parseInt(row.id),projectId:parseInt(row.projectId),recurrence:row.recurrence==='true',recurrenceValue:row.recurrenceValue?parseInt(row.recurrenceValue):null,assetPercentage:parseInt(row.assetPercentage),modeledCost:parseInt(row.modeledCost),overrideCost:row.overrideCost?parseInt(row.overrideCost):null,cost:parseInt(row.cost)}));// Attach actions to projects\nprojects.forEach(project=>{project.actions=actions.filter(action=>action.projectId===project.id);});// Transform audit trail data\nconst auditTrail=auditTrailData.map(row=>({...row,id:parseInt(row.id),entityId:parseInt(row.entityId)}));// Transform teams and regions arrays\nconst teams=teamsData.map(row=>row.name);const regions=regionsData.map(row=>row.name);return{assetTypes,costDatabase,assets,projects,auditTrail,teams,regions};}catch(error){console.error('Error loading data:',error);throw error;}};","map":{"version":3,"names":["Papa","loadCSV","filePath","response","fetch","csvText","text","Promise","resolve","reject","parse","header","complete","results","data","error","console","loadAllData","assetTypesData","costDatabaseData","assetsData","projectsData","actionsData","auditTrailData","teamsData","regionsData","all","assetTypes","forEach","row","code","name","unit","prefix","assetClass","costDatabase","assetType","actionName","cost","parseFloat","description","assets","map","size","expectedLifespan","parseInt","conditionScore","projects","id","completion","actions","projectId","recurrence","recurrenceValue","assetPercentage","modeledCost","overrideCost","project","filter","action","auditTrail","entityId","teams","regions"],"sources":["/Users/refayetsiam/Documents/vsCode_projects_offline/NOV-Projects/projects-v01/src/utils/csvLoader.js"],"sourcesContent":["import Papa from 'papaparse';\n\nexport const loadCSV = async (filePath) => {\n  try {\n    const response = await fetch(filePath);\n    const csvText = await response.text();\n    \n    return new Promise((resolve, reject) => {\n      Papa.parse(csvText, {\n        header: true,\n        complete: (results) => {\n          resolve(results.data);\n        },\n        error: (error) => {\n          reject(error);\n        }\n      });\n    });\n  } catch (error) {\n    console.error(`Error loading CSV file ${filePath}:`, error);\n    throw error;\n  }\n};\n\nexport const loadAllData = async () => {\n  try {\n    const [\n      assetTypesData,\n      costDatabaseData,\n      assetsData,\n      projectsData,\n      actionsData,\n      auditTrailData,\n      teamsData,\n      regionsData\n    ] = await Promise.all([\n      loadCSV('/data/asset-types.csv'),\n      loadCSV('/data/cost-database.csv'),\n      loadCSV('/data/assets.csv'),\n      loadCSV('/data/projects.csv'),\n      loadCSV('/data/actions.csv'),\n      loadCSV('/data/audit-trail.csv'),\n      loadCSV('/data/teams.csv'),\n      loadCSV('/data/regions.csv')\n    ]);\n\n    // Transform asset types data\n    const assetTypes = {};\n    assetTypesData.forEach(row => {\n      assetTypes[row.code] = {\n        name: row.name,\n        unit: row.unit,\n        prefix: row.prefix,\n        assetClass: row.assetClass\n      };\n    });\n\n    // Transform cost database data\n    const costDatabase = {};\n    costDatabaseData.forEach(row => {\n      if (!costDatabase[row.assetClass]) {\n        costDatabase[row.assetClass] = {};\n      }\n      if (!costDatabase[row.assetClass][row.assetType]) {\n        costDatabase[row.assetClass][row.assetType] = {};\n      }\n      costDatabase[row.assetClass][row.assetType][row.actionName] = {\n        cost: parseFloat(row.cost),\n        unit: row.unit,\n        description: row.description\n      };\n    });\n\n    // Transform assets data\n    const assets = assetsData.map(row => ({\n      ...row,\n      size: parseFloat(row.size),\n      expectedLifespan: parseInt(row.expectedLifespan),\n      conditionScore: parseInt(row.conditionScore)\n    }));\n\n    // Transform projects data\n    const projects = projectsData.map(row => ({\n      ...row,\n      id: parseInt(row.id),\n      completion: parseInt(row.completion),\n      actions: []\n    }));\n\n    // Transform actions data and attach to projects\n    const actions = actionsData.map(row => ({\n      ...row,\n      id: parseInt(row.id),\n      projectId: parseInt(row.projectId),\n      recurrence: row.recurrence === 'true',\n      recurrenceValue: row.recurrenceValue ? parseInt(row.recurrenceValue) : null,\n      assetPercentage: parseInt(row.assetPercentage),\n      modeledCost: parseInt(row.modeledCost),\n      overrideCost: row.overrideCost ? parseInt(row.overrideCost) : null,\n      cost: parseInt(row.cost)\n    }));\n\n    // Attach actions to projects\n    projects.forEach(project => {\n      project.actions = actions.filter(action => action.projectId === project.id);\n    });\n\n    // Transform audit trail data\n    const auditTrail = auditTrailData.map(row => ({\n      ...row,\n      id: parseInt(row.id),\n      entityId: parseInt(row.entityId)\n    }));\n\n    // Transform teams and regions arrays\n    const teams = teamsData.map(row => row.name);\n    const regions = regionsData.map(row => row.name);\n\n    return {\n      assetTypes,\n      costDatabase,\n      assets,\n      projects,\n      auditTrail,\n      teams,\n      regions\n    };\n  } catch (error) {\n    console.error('Error loading data:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}