{"ast":null,"code":"import Papa from 'papaparse';\nexport const loadCSV = async filePath => {\n  try {\n    const response = await fetch(filePath);\n    const csvText = await response.text();\n    return new Promise((resolve, reject) => {\n      Papa.parse(csvText, {\n        header: true,\n        complete: results => {\n          resolve(results.data);\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  } catch (error) {\n    console.error(`Error loading CSV file ${filePath}:`, error);\n    throw error;\n  }\n};\nexport const loadAllData = async () => {\n  try {\n    const [assetTypesData, costDatabaseData, assetsData, projectsData, actionsData, auditTrailData, teamsData, regionsData] = await Promise.all([loadCSV('/data/asset-types.csv'), loadCSV('/data/cost-database.csv'), loadCSV('/data/assets.csv'), loadCSV('/data/projects.csv'), loadCSV('/data/actions.csv'), loadCSV('/data/audit-trail.csv'), loadCSV('/data/teams.csv'), loadCSV('/data/regions.csv')]);\n\n    // Transform asset types data\n    const assetTypes = {};\n    assetTypesData.forEach(row => {\n      assetTypes[row.code] = {\n        name: row.name,\n        unit: row.unit,\n        prefix: row.prefix,\n        assetClass: row.assetClass\n      };\n    });\n\n    // Transform cost database data\n    const costDatabase = {};\n    costDatabaseData.forEach(row => {\n      if (!costDatabase[row.assetClass]) {\n        costDatabase[row.assetClass] = {};\n      }\n      if (!costDatabase[row.assetClass][row.assetType]) {\n        costDatabase[row.assetClass][row.assetType] = {};\n      }\n      costDatabase[row.assetClass][row.assetType][row.actionName] = {\n        cost: parseFloat(row.cost),\n        unit: row.unit,\n        description: row.description,\n        lifecycle: row.lifecycle\n      };\n    });\n\n    // Transform assets data\n    const assets = assetsData.map(row => ({\n      ...row,\n      size: parseFloat(row.size),\n      expectedLifespan: parseInt(row.expectedLifespan),\n      conditionScore: parseInt(row.conditionScore)\n    }));\n\n    // Transform projects data\n    const projects = projectsData.map(row => ({\n      ...row,\n      id: parseInt(row.id),\n      completion: parseInt(row.completion),\n      actions: []\n    }));\n\n    // Transform actions data and attach to projects\n    const actions = actionsData.map(row => ({\n      ...row,\n      id: parseInt(row.id),\n      projectId: parseInt(row.projectId),\n      recurrence: row.recurrence === 'true',\n      recurrenceValue: row.recurrenceValue ? parseInt(row.recurrenceValue) : null,\n      assetPercentage: parseInt(row.assetPercentage),\n      modeledCost: parseInt(row.modeledCost),\n      overrideCost: row.overrideCost ? parseInt(row.overrideCost) : null,\n      cost: parseInt(row.cost)\n    }));\n\n    // Attach actions to projects\n    projects.forEach(project => {\n      project.actions = actions.filter(action => action.projectId === project.id);\n    });\n\n    // Transform audit trail data\n    const auditTrail = auditTrailData.map(row => ({\n      ...row,\n      id: parseInt(row.id),\n      entityId: parseInt(row.entityId)\n    }));\n\n    // Transform teams and regions arrays\n    const teams = teamsData.map(row => row.name);\n    const regions = regionsData.map(row => row.name);\n    return {\n      assetTypes,\n      costDatabase,\n      assets,\n      projects,\n      auditTrail,\n      teams,\n      regions\n    };\n  } catch (error) {\n    console.error('Error loading data:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["Papa","loadCSV","filePath","response","fetch","csvText","text","Promise","resolve","reject","parse","header","complete","results","data","error","console","loadAllData","assetTypesData","costDatabaseData","assetsData","projectsData","actionsData","auditTrailData","teamsData","regionsData","all","assetTypes","forEach","row","code","name","unit","prefix","assetClass","costDatabase","assetType","actionName","cost","parseFloat","description","lifecycle","assets","map","size","expectedLifespan","parseInt","conditionScore","projects","id","completion","actions","projectId","recurrence","recurrenceValue","assetPercentage","modeledCost","overrideCost","project","filter","action","auditTrail","entityId","teams","regions"],"sources":["/Users/refayetsiam/Documents/vsCode_projects_offline/NOV-Projects/projects-v01/src/utils/csvLoader.js"],"sourcesContent":["import Papa from 'papaparse';\n\nexport const loadCSV = async (filePath) => {\n  try {\n    const response = await fetch(filePath);\n    const csvText = await response.text();\n    \n    return new Promise((resolve, reject) => {\n      Papa.parse(csvText, {\n        header: true,\n        complete: (results) => {\n          resolve(results.data);\n        },\n        error: (error) => {\n          reject(error);\n        }\n      });\n    });\n  } catch (error) {\n    console.error(`Error loading CSV file ${filePath}:`, error);\n    throw error;\n  }\n};\n\nexport const loadAllData = async () => {\n  try {\n    const [\n      assetTypesData,\n      costDatabaseData,\n      assetsData,\n      projectsData,\n      actionsData,\n      auditTrailData,\n      teamsData,\n      regionsData\n    ] = await Promise.all([\n      loadCSV('/data/asset-types.csv'),\n      loadCSV('/data/cost-database.csv'),\n      loadCSV('/data/assets.csv'),\n      loadCSV('/data/projects.csv'),\n      loadCSV('/data/actions.csv'),\n      loadCSV('/data/audit-trail.csv'),\n      loadCSV('/data/teams.csv'),\n      loadCSV('/data/regions.csv')\n    ]);\n\n    // Transform asset types data\n    const assetTypes = {};\n    assetTypesData.forEach(row => {\n      assetTypes[row.code] = {\n        name: row.name,\n        unit: row.unit,\n        prefix: row.prefix,\n        assetClass: row.assetClass\n      };\n    });\n\n    // Transform cost database data\n    const costDatabase = {};\n    costDatabaseData.forEach(row => {\n      if (!costDatabase[row.assetClass]) {\n        costDatabase[row.assetClass] = {};\n      }\n      if (!costDatabase[row.assetClass][row.assetType]) {\n        costDatabase[row.assetClass][row.assetType] = {};\n      }\n      costDatabase[row.assetClass][row.assetType][row.actionName] = {\n        cost: parseFloat(row.cost),\n        unit: row.unit,\n        description: row.description,\n        lifecycle: row.lifecycle\n      };\n    });\n\n    // Transform assets data\n    const assets = assetsData.map(row => ({\n      ...row,\n      size: parseFloat(row.size),\n      expectedLifespan: parseInt(row.expectedLifespan),\n      conditionScore: parseInt(row.conditionScore)\n    }));\n\n    // Transform projects data\n    const projects = projectsData.map(row => ({\n      ...row,\n      id: parseInt(row.id),\n      completion: parseInt(row.completion),\n      actions: []\n    }));\n\n    // Transform actions data and attach to projects\n    const actions = actionsData.map(row => ({\n      ...row,\n      id: parseInt(row.id),\n      projectId: parseInt(row.projectId),\n      recurrence: row.recurrence === 'true',\n      recurrenceValue: row.recurrenceValue ? parseInt(row.recurrenceValue) : null,\n      assetPercentage: parseInt(row.assetPercentage),\n      modeledCost: parseInt(row.modeledCost),\n      overrideCost: row.overrideCost ? parseInt(row.overrideCost) : null,\n      cost: parseInt(row.cost)\n    }));\n\n    // Attach actions to projects\n    projects.forEach(project => {\n      project.actions = actions.filter(action => action.projectId === project.id);\n    });\n\n    // Transform audit trail data\n    const auditTrail = auditTrailData.map(row => ({\n      ...row,\n      id: parseInt(row.id),\n      entityId: parseInt(row.entityId)\n    }));\n\n    // Transform teams and regions arrays\n    const teams = teamsData.map(row => row.name);\n    const regions = regionsData.map(row => row.name);\n\n    return {\n      assetTypes,\n      costDatabase,\n      assets,\n      projects,\n      auditTrail,\n      teams,\n      regions\n    };\n  } catch (error) {\n    console.error('Error loading data:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}